<script>
  import ColorMode from '../lib/ColorMode.svelte'
  import { colorsByMode, colors } from '../colors'
  import DropDownColorPicker from '../lib/DropDownColorPicker.svelte'
  import GitHubCorner from '../components/GitHubCorner.svelte'
  import MinimalColorPicker from '../lib/MinimalColorPicker.svelte'
  import ModalColorPicker from '../lib/ModalColorPicker.svelte'
</script>

<ColorMode {colorsByMode} otherColors={colors} />

<GitHubCorner href="https://github.com/janosh/svelte-color-mode" />

<h1>
  <img src="/favicon.svg" alt="Logo" />&nbsp;Svelte Color Mode
</h1>

[![NPM version](https://img.shields.io/npm/v/svelte-color-mode?color=blue&logo=NPM)](https://npmjs.com/package/svelte-color-mode)
[![Netlify Status](https://api.netlify.com/api/v1/badges/0238699e-17a8-4423-85de-a5ca30baff0d/deploy-status)](https://app.netlify.com/sites/svelte-color-mode/deploys)

SSR-compatible, flash-free, `localStorage`-persisted color mode + multiple Svelte UI components for selecting current color mode.

## Live Demo

Use any of the UI elements below to change the current color mode.

<div style="display: flex; gap: 4em; align-items: center;">
  <div style="width: 50px; height: 50px; background: black; border-radius: 5px; display: flex; place-content: center;">
    <ModalColorPicker iconSize="2em" />
  </div>

  <DropDownColorPicker />
</div>

## Props

Full list of props/bindable variables for this component:

- `colorsByMode`: `{ dark: { color1: 'white', color2: 'black', ... }, { light: { color1: 'black', color2: 'white', ... } } }` Object of objects where each sub-object defines a color mode (`'dark'`, `'light'`, `'blue'`, ...). All color modes should have identical keys defining the color names. Each color name becomes a CSS variable whose value changes to the value specified by the currently active color mode.
- `otherColors`: `{ [colorName: string]: colorValue: string }` You can also pass in another object of key-value pairs (no sub-objects) that are set as CSS custom variables in a flash-free, SSR-compatible manner alongside the `colorsByMode`. This is just for convenience. Of course, you could add these values into the `:root {}` scope of your `global.css` but then they would be inaccessible to JS. If those colors are the same as the ones used in `colorsByMode`, it would prevent [SSOT](https://wikipedia.org/wiki/Single_source_of_truth).
- `noKeyboardShortcuts` By default, `ColorMode.svelte` creates keyboard shortcuts to switch between modes:

  - `ctrl + 1` for light
  - `ctrl + 2` for dark
  - `ctrl + 3` for auto

  To turn this off, pass the `noKeyboardShortcuts` boolean flag: `<ColorMode noKeyboardShortcuts />`.

## Control

You can hook whatever UI component you want up to the `colorMode` store. All that UI component needs to do is to change the string value of that store to the key of the desired color mode defined in the `colorsByMode` object.

<MinimalColorPicker />

<br/><br/>

```svelte
<script>
  import { colorMode } from './stores'
</script>

<p>Current color mode: <code>$colorMode = '{$colorMode}'</code></p>

<button on:click={() => ($colorMode = `dark`)}>Dark</button>
<button on:click={() => ($colorMode = `light`)}>Light</button>
<button on:click={() => ($colorMode = `auto`)}>Auto</button>
```

## Want to contribute?

At present, `svelte-color-mode` contains just a few UI components for changing the color mode, all under `src/lib/*ColorPicker.svelte`. More are welcome. If you have a good idea for a color mode UI and would like to contribute it, please do! Implementation-wise, all it takes is to import the `colorMode` store (see `stores.ts`) and change its value based on user input.

To submit a PR, clone the repo, install dependencies and start the dev server to try out your changes.

```sh
git clone https://github.com/janosh/svelte-color-mode
cd svelte-color-mode
yarn
yarn dev
```

## Examples

Used in production on these sites:

- [Afara](https://afara.foundation)
- [Ocean artUp](https://ocean-artup.eu)
- [Studenten bilden Sch√ºler](https://studenten-bilden-schueler.de)

<style>
  :global(:root) {
    --ghc-color: var(--bodyBg);
    --ghc-bg: var(--textColor);
  }
  h1 {
    font-size: clamp(2rem, 2rem + 2vw, 3rem);
  }
  h1 img {
    height: 1.2em;
    vertical-align: -10pt;
    padding-right: 4pt;
  }
</style>
